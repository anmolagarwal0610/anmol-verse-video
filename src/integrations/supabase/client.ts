
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://nlrxzpszbkifkkuyfinx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5scnh6cHN6YmtpZmtrdXlmaW54Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI4Mjk1NzQsImV4cCI6MjA1ODQwNTU3NH0.AfhZH-Pwc-fxIScQHCNe_GFAIKF55nHIa8Dnuz8lqs4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storage: localStorage,
    flowType: 'pkce',
    detectSessionInUrl: true,
    debug: true,
  }
});

// Enhanced debugging for OAuth session detection and PKCE flow
if (typeof window !== 'undefined') {
  console.log('🔍 [Supabase Client] Initializing with enhanced OAuth support');
  console.log('🔍 [Supabase Client] Current origin:', window.location.origin);
  console.log('🔍 [Supabase Client] Current URL:', window.location.href);
  console.log('🔍 [Supabase Client] Hash present:', !!window.location.hash);
  console.log('🔍 [Supabase Client] Search params:', window.location.search);
  
  // PKCE Verifier status - check for all possible key variations
  const pkceVerifier = localStorage.getItem(`supabase.auth.pkce_verifier`);
  const supabaseKeys = Object.keys(localStorage).filter(key => key.includes('supabase'));
  console.log('🔍 [Supabase Client] PKCE verifier exists:', !!pkceVerifier, 'value:', pkceVerifier);
  console.log('🔍 [Supabase Client] All Supabase localStorage keys:', supabaseKeys);
  
  // Log all localStorage keys to see what's stored
  console.log('🔍 [Supabase Client] All localStorage keys:', Object.keys(localStorage));
  
  // Check if we have a session in localStorage
  const session = localStorage.getItem('anmol-verse-auth-token');
  console.log('🔍 [Supabase Client] Session in localStorage:', session ? 'exists' : 'not found');

  // Enhanced auth state change listener with comprehensive logging
  supabase.auth.onAuthStateChange((event, session) => {
    console.log('🔍 [Supabase Client] Auth state changed:', event);
    console.log('🔍 [Supabase Client] Session exists:', !!session);
    console.log('🔍 [Supabase Client] Current URL during auth change:', window.location.href);
    console.log('🔍 [Supabase Client] URL hash during auth change:', window.location.hash);
    console.log('🔍 [Supabase Client] URL search during auth change:', window.location.search);
    
    if (session) {
      console.log('🔍 [Supabase Client] User email:', session.user?.email);
      console.log('🔍 [Supabase Client] Session expires at:', new Date(session.expires_at! * 1000));
      console.log('🔍 [Supabase Client] Access token exists:', !!session.access_token);
      console.log('🔍 [Supabase Client] Refresh token exists:', !!session.refresh_token);
      console.log('🔍 [Supabase Client] Provider token:', session.provider_token ? 'exists' : 'missing');
      console.log('🔍 [Supabase Client] Provider refresh token:', session.provider_refresh_token ? 'exists' : 'missing');
    }

    if (event === 'SIGNED_IN') {
      console.log('🔍 [Supabase Client] User successfully signed in');
      // Clear any pending redirect paths if sign in is successful
      if (window.location.pathname === '/auth/callback' || window.location.hash.includes('/auth')) {
        console.log('🔍 [Supabase Client] Clearing auth callback state');
      }
    }

    if (event === 'TOKEN_REFRESHED') {
      console.log('🔍 [Supabase Client] Token refreshed successfully');
    }

    if (event === 'SIGNED_OUT') {
      console.log('🔍 [Supabase Client] User signed out');
      // Clear PKCE verifier on sign out
      localStorage.removeItem(`supabase.auth.pkce_verifier`);
    }
  });

  // Listen for hash changes to detect OAuth redirects
  window.addEventListener('hashchange', () => {
    console.log('🔍 [Supabase Client] Hash changed to:', window.location.hash);
    if (window.location.hash.includes('access_token') || window.location.hash.includes('code=')) {
      console.log('🔍 [Supabase Client] OAuth tokens detected in hash, triggering session check');
      // Small delay to allow Supabase to process the tokens
      setTimeout(() => {
        supabase.auth.getSession().then(({ data, error }) => {
          console.log('🔍 [Supabase Client] Post-hash session check:', data.session ? 'session found' : 'no session', error);
        });
      }, 100);
    }
  });

  // Log URL parameters on page load for OAuth debugging
  const urlParams = new URLSearchParams(window.location.search);
  const urlHash = window.location.hash;
  if (urlParams.get('code') || urlHash.includes('access_token')) {
    console.log('🔍 [Supabase Client] OAuth parameters detected in URL');
    console.log('🔍 [Supabase Client] URL search params:', window.location.search);
    console.log('🔍 [Supabase Client] URL hash:', window.location.hash);
    console.log('🔍 [Supabase Client] Code parameter:', urlParams.get('code'));
    console.log('🔍 [Supabase Client] State parameter:', urlParams.get('state'));
    console.log('🔍 [Supabase Client] Error parameter:', urlParams.get('error'));
    
    // Check PKCE verifier status when processing OAuth callback
    const pkceVerifierAtCallback = localStorage.getItem(`supabase.auth.pkce_verifier`);
    console.log('🔍 [Supabase Client] PKCE verifier at callback:', pkceVerifierAtCallback ? 'exists' : 'missing');
    if (pkceVerifierAtCallback) {
      console.log('🔍 [Supabase Client] PKCE verifier value:', pkceVerifierAtCallback);
    }
  }
}
